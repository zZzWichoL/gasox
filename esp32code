#include <WiFiManager.h>
#include <ESPmDNS.h>

WiFiServer server(8080);

const int LED_PIN = 13;
const int buzzerPin = 26;
const int MQ4_PIN = 34; // ADC1_6 (GNC / Metano)
const int MQ7_PIN = 35; // ADC1_7 (CO)

int mq4Threshold = 3000; // Valor por defecto, puede ser modificado por la app
int mq7Threshold = 3000; // Valor por defecto, puede ser modificado por la app

unsigned long lastAlertTime = 0;
bool alarmState = false;

void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  digitalWrite(buzzerPin, LOW);

  WiFiManager wifiManager;
  wifiManager.autoConnect("GASOX");

  Serial.println("WiFi conectado!");
  Serial.print("Direcci√≥n IP: ");
  Serial.println(WiFi.localIP());

  if (MDNS.begin("gasox")) {
    Serial.println("mDNS responder iniciado: gasox.local");
  } else {
    Serial.println("Error al iniciar mDNS");
  }

  server.begin();
  server.setNoDelay(true);
}

void activateAlarm(bool state) {
  if (state) {
    digitalWrite(LED_PIN, millis() % 1000 < 500 ? HIGH : LOW);
    digitalWrite(buzzerPin, millis() % 1000 < 500 ? HIGH : LOW);
  } else {
    digitalWrite(LED_PIN, LOW);
    digitalWrite(buzzerPin, LOW);
  }
}

void loop() {
  int mq4Value = analogRead(MQ4_PIN);
  int mq7Value = analogRead(MQ7_PIN);

  Serial.print("MQ4 (GNC/Metano): ");
  Serial.print(mq4Value);
  Serial.print(" | MQ7 (CO): ");
  Serial.println(mq7Value);

  // Activar alarma si sobrepasan umbral
  alarmState = mq4Value > mq4Threshold || mq7Value > mq7Threshold;
  activateAlarm(alarmState);

  WiFiClient client = server.available();
  if (client) {
    Serial.println("Cliente conectado");
    while (client.connected()) {
      if (client.available()) {
        String command = client.readStringUntil('\n');
        command.trim();

        if (command.startsWith("SET_THRESHOLD_MQ4:")) {
          mq4Threshold = command.substring(18).toInt();
          client.println("MQ4_UMBRAL_ACTUALIZADO");
        } else if (command.startsWith("SET_THRESHOLD_MQ7:")) {
          mq7Threshold = command.substring(18).toInt();
          client.println("MQ7_UMBRAL_ACTUALIZADO");
        } else if (command == "GET_VALUES") {
          client.printf("MQ4:%d\nMQ7:%d\n", mq4Value, mq7Value);
        } else if (command == "GET_ALARM_STATE") {
          client.println(alarmState ? "ALARMA_ACTIVA" : "SIN_ALARMA");
        } else if (command == "FORGET_WIFI") {
          client.println("OLVIDANDO_WIFI");
          client.flush();
          delay(100);
          WiFi.disconnect(true, true);
          ESP.restart();
        } else {
          client.println("COMANDO_DESCONOCIDO");
        }
        client.flush();
      }
      delay(10);
    }
    client.stop();
    Serial.println("Cliente desconectado");
  }

  delay(500); // Intervalo de muestreo
}
